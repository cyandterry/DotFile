;; auto-save-list into ~/.emacs-save
(setq auto-save-list-file-name "~/.emacs-save")

;; add home directory to load path
(add-to-list 'load-path "~/.emacs.d/")

;; fill out to column 76
(setq-default fill-column 76)

;; display line number
;;(global-linum-mode t)

;; Get rid of load screen
(setq inhibit-splash-screen t)

;; display time
(display-time)

;; programming modes
(autoload 'java-mode "cc-mode" "java" t)
(autoload 'c++-mode  "cc-mode" "c++"  t)
(autoload 'c-mode    "cc-mode" "c"    t)

;; python-mode
;;(require 'python-mode)
;;(setq auto-mode-alist
;;  (append '(("\\.py$" . python-mode)
;;    ) auto-mode-alist
;;  ))
(setq py-indent-offset 4)

;; turn on linum-mode when python-mode fires
(defun my-python-mode-hook () 
 (linum-mode 1)) 
(add-hook 'python-mode-hook 'my-python-mode-hook) 

;; visual-basic-mode
(autoload 'visual-basic-mode "visual-basic-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.asp$" . visual-basic-mode))
(add-to-list 'auto-mode-alist '("\\.bas$" . visual-basic-mode))
(add-to-list 'auto-mode-alist '("\\.cls$" . visual-basic-mode))
(add-to-list 'auto-mode-alist '("\\.vbs$" . visual-basic-mode))

;; nxml-mode
;;(require 'nxml-mode)
;;(setq auto-mode-alist
;;  (append '(("\\.docbook$" . nxml-mode)
;;   ) auto-mode-alist
;;  ))

;; javascript-mode
(autoload 'javascript-mode "javascript" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . javascript-mode))
(setq js-indent-level 4)

;; cc-mode customizations
(require 'cc-mode)
(defun cc-linux-hook ()
  ;; start with default linux formatting
  (c-set-style "linux")

  (setq
   c-hanging-braces-alist (append c-hanging-braces-alist
				  '((inline-open after)
				    (class-open after)
				    ))
   c-cleanup-list         (append c-cleanup-list
				  '(brace-elseif-brace
				    defun-close-semi
				    ))
   c-auto-newline t
   )
  ;; turn on linum-mode too
  (linum-mode 1)
  )

(add-hook 'c-mode-common-hook 'cc-linux-hook)

;; SASS mode
(add-to-list 'load-path "~/Dropbox/src/.emacs.d/scss-mode.el")
(require 'scss-mode)
(setq-default scss-compile-at-save nil)

;; indent with spaces, not tabs and set defaults to 4
(setq-default indent-tabs-mode nil)
(setq-default sgml-basic-offset 4)
(setq-default nxml-child-indent 2)

;; font-lock configuration
(require 'font-lock)
(setq-default font-lock-maximum-decoration t)
(setq-default font-lock-maximum-size 1000000)
(setq-default font-lock-use-colors '(color))
(setq-default font-lock-auto-fontify t)
(global-font-lock-mode t)

;; Adobe Source Code Pro font, 11 pt
;; http://blogs.adobe.com/typblography/2012/09/source-code-pro.html
;; http://stefanv.github.com/blog/2012/09/26/consolas-vs-source-code-pro/
(set-default-font "Source Code Pro-11")

;; global bindings
(global-set-key "\M-g" 'goto-line)

;; https://github.com/glasserc/ethan-wspace
;;(require 'ethan-wspace)
;;(global-ethan-wspace-mode 1)

;; personal settings
(custom-set-variables
  ;; Custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(display-time-mode t)
 '(scroll-bar-mode (quote right))
 '(tool-bar-mode nil nil (tool-bar))
 '(user-mail-address "ycao@navisite.com")
 '(show-paren-mode          t)          ;; highlight matching paren on hover
)

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
;; replace everything selected but not
(delete-selection-mode 1)

;; disable C-z to minimize the window
(put 'suspend-frame 'disabled t)

;; disable toolbar
(tool-bar-mode -1)

;; scroll less "jumpy" than defaults
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time

;; load smooth-scroll
(require 'smooth-scroll)
(smooth-scroll-mode t)

;; change command to meta, and ignore option to use weird Norwegian keyboard
(setq mac-option-modifier 'super)
(setq mac-command-modifier 'meta)
(setq ns-function-modifier 'hyper)

;; Norwegian mac-keyboard alt-keys)
(define-key key-translation-map (kbd "s-8") (kbd "["))
(define-key key-translation-map (kbd "s-(") (kbd "{"))
(define-key key-translation-map (kbd "s-9") (kbd "]"))
(define-key key-translation-map (kbd "s-)") (kbd "}"))
(define-key key-translation-map (kbd "s-7") (kbd "|"))
(define-key key-translation-map (kbd "s-/") (kbd "\\"))
(define-key key-translation-map (kbd "M-s-7") (kbd "M-|"))

(global-set-key (kbd "s-u") 'universal-argument)
(global-set-key (kbd "s--") 'negative-argument)

;; redefine read-char, at least for invocation from elisp
(defun read-char (&optional prompt) ;; (inherit-input-method seconds)
  "Read a character from the command input (keyboard or macro).
   It is returned as a number.
   If the character has modifiers, they are resolved and reflected to the
   character code if possible (e.g. C-SPC -> 0).

   If the user generates an event which is not a character (i.e. a mouse
   click or function key event), `read-char' signals an error.  As an
   exception, switch-frame events are put off until non-character events
   can be read.
   If you want to read non-character events, or ignore them, call
   `read-event' or `read-char-exclusive' instead.

   If the optional argument PROMPT is non-nil, display that as a prompt.
   If the optional argument INHERIT-INPUT-METHOD is non-nil and some
   input method is turned on in the current buffer, that input method
   is used for reading a character.
   If the optional argument SECONDS is non-nil, it should be a number
   specifying the maximum number of seconds to wait for input.  If no
   input arrives in that time, return nil.  SECONDS may be a
   floating-point value."
  ;; if (! NILP (prompt))
  ;;   message_with_string ("%s", prompt, 0);
  ;; val = read_filtered_event (1, 1, 1, ! NILP (inherit_input_method),
  ;;                            seconds);
  ;; return (NILP (val) ? Qnil
  ;;         : make_number (char_resolve_modifier_mask (XINT (val))));
  (let ((inherit-input-method nil) (seconds nil))
    ;; `read-key' doesn't explicitly inhibit the input method, but in
    ;; practice it disables at least quail input methods because it
    ;; binds overriding-terminal-local-map.
    (if inherit-input-method (error "Not implemented"))
    (catch 'read-char-exclusive
      (let ((timer (when seconds
                     (run-with-timer seconds nil
                                     (lambda ()
                                       (throw 'read-char-exclusive nil))))))
        (unwind-protect
            (let ((event (read-key prompt)))
              (if (numberp event)
                  event
                (setq unread-command-events
                      (nconc (mapcar 'identity (this-single-command-raw-keys))
                             unread-command-events))
                (error "Non-character input-event")))
          (when timer (cancel-timer timer)))))))

;; mac friendly font
(when window-system
  (setq magnars/default-font "-apple-Monaco-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")
  (set-face-attribute 'default nil :font magnars/default-font))

;; keybinding to toggle full screen mode
(global-set-key (quote [M-f10]) (quote ns-toggle-fullscreen))

;; Move to trash when deleting stuff
(setq delete-by-moving-to-trash t
      trash-directory "~/.Trash/emacs")

;; Don't open files from the workspace in a new frame
(setq ns-pop-up-frames nil)

;; Use aspell for spell checking: brew install aspell --lang=en
(setq ispell-program-name "/usr/local/bin/aspell")

(provide 'mac)